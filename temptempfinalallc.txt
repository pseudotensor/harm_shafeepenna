 extern  void check_spc_singularities_user(void);
 extern  int vpot2field(FTYPE A[][N1M+SHIFT1][N2M+SHIFT2][N3M+SHIFT3],FTYPE p[][N2M][N3M][NPR]);
 extern  int prepre_init(void);
 extern  int pre_init(int argc, char *argv[]);
 extern  int init_defgrid(void);
 extern  int init_defglobal(void);
 extern  int init_defconsts(void);
 extern  int init_grid_post_set_grid(void);
 extern  int post_par_set(void);
 extern  void filterffde(int i, int j, int k, FTYPE *pr);
 extern  void filter_coldgrmhd(int i, int j, int k, FTYPE *pr);
 extern  int set_dt(FTYPE (*prim)[N2M][N3M][NPR], SFTYPE *dt);
 extern  int post_init(void);
 extern  int compute_new_metric_and_prims(int whichtime, SFTYPE MBH, SFTYPE a, SFTYPE QBH);
 extern  int init_conservatives(FTYPE p[][N2M][N3M][NPR], FTYPE Utemp[][N2M][N3M][NPR], FTYPE U[][N2M][N3M][NPR]);
 extern  void set_arrays(void);
 extern  int initial_averageu_fv(int *fieldfrompotential, FTYPE (*prim)[N2M][N3M][NPR], FTYPE (*Upoint)[N2M][N3M][NPR], FTYPE (*Uavg)[N2M][N3M][NPR]);
 extern  int initial_averageu_fluxrecon(int *fieldfrompotential, FTYPE prim[][N2M][N3M][NPR], FTYPE Upoint[][N2M][N3M][NPR], FTYPE Uavg[][N2M][N3M][NPR]);
 extern  int set_dt(FTYPE (*prim)[N2M][N3M][NPR], SFTYPE *dt);
 extern  int init_selfgrav(void);
 extern  void dxdxprim(FTYPE *X, FTYPE *V, FTYPE (*dxdxp)[NDIM]);
 extern  void gcov_func(struct of_geom *ptrgeom, int getprim, int whichcoord, FTYPE *X, FTYPE gcov[][NDIM], FTYPE *gcovpert);
 extern  void gcon_func(struct of_geom *ptrgeom, int getprim, int whichcoord, FTYPE *X, FTYPE gcov[][NDIM], FTYPE gcon[][NDIM]);
 extern  void eomfunc_func(struct of_geom *ptrgeom, int getprim, int whichcoord, FTYPE *X, FTYPE *eomfunc);
 extern  int bound_spacetime_inside_horizon(void);
 extern  int store_old_metric(void);
 extern  void set_drsing(void);
 extern  void set_rvsr(void);
 extern  void control_time_store_metric(int whichtime, FTYPE *Cunew);
 extern  int init_selfgrav(void);
 extern  int fluxcalc(int stage, FTYPE pr[][N2M][N3M][NPR], 		      FTYPE F1[][N2M][N3M][NPR],  		      FTYPE F2[][N2M][N3M][NPR],  		      FTYPE F3[][N2M][N3M][NPR],  		      FTYPE CUf, 		      FTYPE CUnew, 		      FTYPE *ndt1, 		      FTYPE *ndt2, 		      FTYPE *ndt3 		      );
 extern  void diag_source_comp(struct of_geom *ptrgeom, FTYPE (*dUcomp)[NPR],SFTYPE Dt);
 extern  void diag_source_all(struct of_geom *ptrgeom, FTYPE *dU,SFTYPE Dt);
 extern  int diag_flux(FTYPE prim[][N2M][N3M][NPR], FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR],FTYPE F3[][N2M][N3M][NPR],SFTYPE Dt);
 extern  int compute_new_metric_substep(FTYPE pb[][N2M][N3M][NPR],FTYPE *CUf, FTYPE *Cunew);
 extern  int diss_compute(int evolvetype, int inputtype, FTYPE *U, struct of_geom *ptrgeom, FTYPE *prbefore, FTYPE *pr);
 extern  int field_integrate_fluxrecon(int stage, FTYPE pr[][N2M][N3M][NPR], FTYPE quasifield[][N2M][N3M][NPR], FTYPE pointfield[][N2M][N3M][NPR]);
 extern  int bound_flux(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  int fluxcalc(int stage, FTYPE pr[][N2M][N3M][NPR], 		      FTYPE F1[][N2M][N3M][NPR],  		      FTYPE F2[][N2M][N3M][NPR],  		      FTYPE F3[][N2M][N3M][NPR],  		      FTYPE CUf, 		      FTYPE CUnew, 		      FTYPE *ndt1, 		      FTYPE *ndt2, 		      FTYPE *ndt3 		      );
 extern  void diag_source_comp(struct of_geom *ptrgeom, FTYPE (*dUcomp)[NPR],SFTYPE Dt);
 extern  void diag_source_all(struct of_geom *ptrgeom, FTYPE *dU,SFTYPE Dt);
 extern  int diag_flux(FTYPE prim[][N2M][N3M][NPR], FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR],FTYPE F3[][N2M][N3M][NPR],SFTYPE Dt);
 extern  int compute_new_metric_substep(FTYPE pb[][N2M][N3M][NPR],FTYPE *CUf, FTYPE *Cunew);
 extern  int diss_compute(int evolvetype, int inputtype, FTYPE *U, struct of_geom *ptrgeom, FTYPE *prbefore, FTYPE *pr);
 extern  int avg2cen_interp(int *locpl, int *whichpltoavg,  int *ifnotavgthencopy, int whichquantity, int whichavg2cen, FTYPE (*prims_from_avg_cons)[N2M][N3M][NPR], FTYPE (*in)[N2M][N3M][NPR], FTYPE (*out)[N2M][N3M][NPR]);
 extern  void compute_dr(int i, int j, int k, FTYPE *dr);
 extern  void compute_polycoef_line( 				int preforder, int pl, int bs, int ps, int pe, int be,  				FTYPE *yin, FTYPE (*youtpolycoef)[NBIGM]);
 extern  void paracont(FTYPE ddq, FTYPE *y, FTYPE *facecont);
 extern  void parasteepgen(int pl, FTYPE etai, FTYPE *V, FTYPE *P, FTYPE *y, FTYPE *dq, FTYPE *l, FTYPE *r);
 extern  void paraflatten(int dir, int pl, FTYPE *y, FTYPE Fi, FTYPE *l, FTYPE *r);
 extern  void checkparamonotonicity(int dqrange, int pl, FTYPE *y, FTYPE *ddq, FTYPE *dq, FTYPE *lin, FTYPE *rin, FTYPE *lout, FTYPE *rout);
 extern  int flux_ct(int stage, FTYPE pr[][N2M][N3M][NPR],FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  int bound_flux(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  int rescale(int which, int dir, FTYPE *pr, struct of_geom *geom,FTYPE*newvar);
 extern  int flux_compute_general(int i, int j, int k, int dir, struct of_geom *geom, FTYPE CUf, FTYPE *p_l, FTYPE *p_r, FTYPE *F, FTYPE *ctop);
 extern  int flux_compute_splitmaem(int i, int j, int k, int dir, struct of_geom *geom, FTYPE CUf, FTYPE *p_l, FTYPE *p_r, FTYPE *F, FTYPE *FEM, FTYPE *ctop);
 extern  int get_global_wavespeeds(int dir,FTYPE *pr,struct of_geom *ptrgeom, FTYPE *wspeedtemp);
 extern  int flux_compute_general(int i, int j, int k, int dir, struct of_geom *geom, FTYPE CUf, FTYPE *p_l, FTYPE *p_r, FTYPE *F, FTYPE *ctop);
 extern  int flux_compute_splitmaem(int i, int j, int k, int dir, struct of_geom *geom, FTYPE CUf, FTYPE *p_l, FTYPE *p_r, FTYPE *F, FTYPE *FEM, FTYPE *ctop);
 extern  int get_global_wavespeeds(int dir,FTYPE *pr,struct of_geom *ptrgeom, FTYPE *wspeedtemp);
 extern  int rescale(int which, int dir, FTYPE *pr, struct of_geom *geom,FTYPE*newvar);
 extern  void set_plpr(int dir, int i, int j, int k, FTYPE (*prim)[N2M][N3M][NPR], FTYPE *p_l, FTYPE *p_r);
 extern  int rescale(int which, int dir, FTYPE *pr, struct of_geom *geom,FTYPE*newvar);
 extern  void remapdq( int dir, int idel, int jdel, int kdel, int i, int j, int k, FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP], FTYPE *p2interp_l, FTYPE *p2interp_r );
 extern  void remapplpr( int dir, int idel, int jdel, int kdel, int i, int j, int k, FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP], FTYPE *p2interp_l, FTYPE *p2interp_r );
 extern  void slope_lim_linetype_c2e(int realisinterp, int whichprimtype, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void slope_lim_pointtype(int interporflux, int realisinterp, int pl, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void slope_lim_linetype_c2e(int realisinterp, int whichprimtype, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void slope_lim_pointtype(int interporflux, int realisinterp, int pl, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void flux_interp(int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*prims_guess)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interpm)[N2M][N3M][NPR], FTYPE (*p2interpp)[N2M][N3M][NPR], FTYPE (*pleft)[N2M][N3M][NPR], FTYPE (*pright)[N2M][N3M][NPR]);
 extern  void flux_interp(int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*prims_guess)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interpm)[N2M][N3M][NPR], FTYPE (*p2interpp)[N2M][N3M][NPR], FTYPE (*pleft)[N2M][N3M][NPR], FTYPE (*pright)[N2M][N3M][NPR]);
 extern  void flux_interp(int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*prims_guess)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interpm)[N2M][N3M][NPR], FTYPE (*p2interpp)[N2M][N3M][NPR], FTYPE (*pleft)[N2M][N3M][NPR], FTYPE (*pright)[N2M][N3M][NPR]);
 extern  void flux_interp_multiple(int *whichpltoavg, int *ifnotavgthencopy, int numdirs, int *whichquantitylist, int *interporfluxlist, int *dirmethodlist, int *Nvec, int *intdirlist, int *fluxdirlist, int *idellist, int *jdellist, int *kdellist, FTYPE (*pr)[N2M][N3M][NPR], FTYPE (*fluxvec[NDIM])[N2M][N3M][NPR]);
 extern  int bound_flux(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  void flux_interp_multiple(int *whichpltoavg, int *ifnotavgthencopy, int numdirs, int *whichquantitylist, int *interporfluxlist, int *dirmethodlist, int *Nvec, int *intdirlist, int *fluxdirlist, int *idellist, int *jdellist, int *kdellist, FTYPE (*pr)[N2M][N3M][NPR], FTYPE (*fluxvec[NDIM])[N2M][N3M][NPR]);
 extern  void flux_interp(int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*prims_guess)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interpm)[N2M][N3M][NPR], FTYPE (*p2interpp)[N2M][N3M][NPR], FTYPE (*pleft)[N2M][N3M][NPR], FTYPE (*pright)[N2M][N3M][NPR]);
 extern  int avg2cen_interp(int *locpl, int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int whichavg2cen, FTYPE (*prims_from_avg_cons)[N2M][N3M][NPR], FTYPE (*in)[N2M][N3M][NPR], FTYPE (*out)[N2M][N3M][NPR]);
 extern  int avg2cen_interp(int *locpl, int *whichpltoavg, int *ifnotavgthencopy, int whichquantity, int interporflux,FTYPE (*prims_from_avg_cons)[N2M][N3M][NPR], FTYPE (*in)[N2M][N3M][NPR], FTYPE (*out)[N2M][N3M][NPR]);
 extern  void multidir_pre_slope_lim_linetype_weno(void);
 extern  void multidir_post_slope_lim_linetype_weno(void);
 extern  FTYPE limit_prim_correction( FTYPE fractional_difference_threshold, struct of_geom *geom, FTYPE *pin, FTYPE *pout );
 extern  int choose_limiter(int dir, int i, int j, int k, int pl);
 extern  int bound_flux(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  int bound_flux(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  void slope_lim_linetype_c2e(int realisinterp, int whichprimtype, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void slope_lim_pointtype(int interporflux, int realisinterp, int pl, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  int rescale(int which, int dir, FTYPE *pr, struct of_geom *geom,FTYPE*newvar);
 extern  int choose_limiter(int dir, int i, int j, int k, int pl);
 extern  void slope_lim_linetype_c2e(int realisinterp, int whichprimtype, int interporflux, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*stencilvar)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  void slope_lim_pointtype(int interporflux, int realisinterp, int pl, int dir, int idel, int jdel, int kdel, FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*p2interp)[N2M][N3M][NPR2INTERP], FTYPE (*dq)[N2M][N3M][NPR2INTERP], FTYPE (*pleft)[N2M][N3M][NPR2INTERP], FTYPE (*pright)[N2M][N3M][NPR2INTERP]);
 extern  int choose_limiter(int dir, int i, int j, int k, int pl);
 extern  int get_wavespeeds(int dir, struct of_geom *ptrgeom, FTYPE *p_l, FTYPE *p_r, FTYPE *U_l, FTYPE *U_r, FTYPE *F_l, FTYPE *F_r, struct of_state *state_l, struct of_state * state_r, FTYPE *cminmax_l, FTYPE *cminmax_r, FTYPE *cminmax, FTYPE *ctop);
 extern  int get_wavespeeds(int dir, struct of_geom *ptrgeom, FTYPE *p_l, FTYPE *p_r, FTYPE *U_l, FTYPE *U_r, FTYPE *F_l, FTYPE *F_r, struct of_state *state_l, struct of_state * state_r, FTYPE *cminmax_l, FTYPE *cminmax_r, FTYPE *cminmax, FTYPE *ctop);
 extern  int vpot2field_useflux(int *fieldloc,FTYPE pfield[][N2M][N3M][NPR],FTYPE ufield[][N2M][N3M][NPR]);
 extern  int vpot2field_centeredfield(FTYPE (*A)[N1M+SHIFT1][N2M+SHIFT2][N3M+SHIFT3],FTYPE pfield[][N2M][N3M][NPR],FTYPE ufield[][N2M][N3M][NPR]);
 extern  int vpot2field_staggeredfield(FTYPE (*A)[N1M+SHIFT1][N2M+SHIFT2][N3M+SHIFT3],FTYPE pfield[][N2M][N3M][NPR],FTYPE ufield[][N2M][N3M][NPR]);
 extern  int interpolate_ustag2fieldcent(int stage, int timeorder, int numtimeorders, FTYPE preal[][N2M][N3M][NPR],FTYPE pstag[][N2M][N3M][NPR],FTYPE ucent[][N2M][N3M][NPR],FTYPE pcent[][N2M][N3M][NPR]);
 extern  int vectorpot_fluxreconorfvavg(int stage, FTYPE pr[][N2M][N3M][NPR], FTYPE (*A)[N1M+SHIFT1][N2M+SHIFT2][N3M+SHIFT3]);
 extern  int deaverage_fields_fv(FTYPE (*primreal)[N2M][N3M][NPR], FTYPE (*in)[N2M][N3M][NPR], FTYPE (*out)[N2M][N3M][NPR]);
 extern  int vectorpot_useflux(int stage, FTYPE pr[][N2M][N3M][NPR]);
 extern  int field_Bhat_fluxrecon(FTYPE pr[][N2M][N3M][NPR], FTYPE pointfield[][N2M][N3M][NPR], FTYPE quasifield[][N2M][N3M][NPR]);
 extern  int bound_flux_fluxrecon(int stage, FTYPE pr[][N2M][N3M][NPR], int *Nvec, FTYPE (*fluxvec[NDIM])[N2M][N3M][NPR]);
 extern  int bound_prim_user_general(int whichdir, int ispstag, int boundstage, int* dirprim, FTYPE prim[][N2M][N3M][NPR]);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  int Utoprimdiss(int evolvetype, int inputtype, FTYPE *U,  struct of_geom *ptrgeom, FTYPE *pr, int *otherfail);
 extern  int invertentropyflux_calc(FTYPE entropyflux,int dir, struct of_state *q, FTYPE*pr);
 extern  int ufromentropy_calc(FTYPE entropy, FTYPE *pr);
 extern  int entropy_calc(FTYPE *pr, FTYPE *entropy);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  FTYPE phibh_compute(FTYPE M, FTYPE a, FTYPE r, FTYPE th);
 extern  int choose_limiter(int dir, int i, int j, int k, int pl);
 extern  void para(FTYPE *y, FTYPE *lout, FTYPE *rout);
 extern  void para2(FTYPE *y, FTYPE *lout, FTYPE *rout);
 extern  void para3(FTYPE *y, FTYPE *lout, FTYPE *rout);
 extern  void para4(int pl, FTYPE *y, FTYPE *lout, FTYPE *rout);
 extern  void parapl(int realisinterp, int dir, FTYPE **yreal, FTYPE **y, FTYPE *lout, FTYPE *rout);
 extern  void get_limit_slopes(int reallim, int extremum, FTYPE *dq1l, FTYPE *dq1r, FTYPE *dq2, FTYPE *dqout);
 extern  void getPressure(FTYPE **yrealpl, FTYPE *P);
 extern  void parasteep(int dir, int pl, FTYPE *V, FTYPE *P, FTYPE *y, FTYPE *dq, FTYPE *l, FTYPE *r);
 extern  void paraflatten(int dir, int pl, FTYPE *y, FTYPE Fi, FTYPE *l, FTYPE *r);
 extern  FTYPE  Ficalc(int dir, FTYPE *V, FTYPE *P, FTYPE **ypl);
 extern  void checkparamonotonicity(int dqrange, int pl, FTYPE *y, FTYPE *ddq, FTYPE *dq, FTYPE *lin, FTYPE *rin, FTYPE *lout, FTYPE *rout);
 extern  int choose_limiter(int dir, int i, int j, int k, int pl);
 extern  void compute_monotonicity_line(int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE (*df)[NBIGM],  FTYPE (*monoindicator)[NBIGM] , FTYPE *yin, FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void compute_monotonicity_line_multipl(int stencilvarisnull, int MULTIPLTYPE, int whichquantity, int dir, int do_weight_or_recon, int recontype, int whichreduce, int preforder, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE *stiffindicator, FTYPE *Vline,  FTYPE *Pline, FTYPE (*df)[NUMDFS][NBIGM], FTYPE (*dP)[NBIGM], FTYPE (*etai)[NBIGM], FTYPE (*monoindicator)[NUMMONOINDICATORS][NBIGM], FTYPE (*yprim)[2][NBIGM], FTYPE (*ystencilvar)[2][NBIGM], FTYPE (*yin)[2][NBIGM], FTYPE (*yout)[2][NBIGM], FTYPE (*youtpolycoef)[MAXSPACEORDER][NBIGM]);
 extern  void compute_monotonicity_line_indicatoronly(int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE (*df)[NBIGM],  FTYPE (*monoindicator)[NBIGM] , FTYPE *yin, FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void compute_monotonicity_line_valueonly(int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE (*df)[NBIGM],  FTYPE (*monoindicator)[NBIGM] , FTYPE *yin, FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void pass_1d_line_weno(int whichquantity, int dir, int do_weight_or_recon, int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE *stiffindicator, FTYPE *V,  FTYPE *P, FTYPE (*df)[NBIGM], FTYPE (*dP)[NBIGM], FTYPE *etai, FTYPE (*monoindicator)[NBIGM], FTYPE (*yprim)[2][NBIGM], FTYPE (*ystencilvar)[NBIGM], FTYPE (*yin)[NBIGM], FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void pass_1d_line_paraline(int whichquantity, int dir, int do_weight_or_recon, int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE *stiffindicator, FTYPE *V,  FTYPE *P, FTYPE (*df)[NBIGM], FTYPE (*dP)[NBIGM], FTYPE *etai, FTYPE (*monoindicator)[NBIGM], FTYPE (*yprim)[2][NBIGM], FTYPE (*ystencilvar)[NBIGM], FTYPE (*yin)[NBIGM], FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void pass_1d_line_multipl_weno(int MULTIPLTYPE, int whichquantity, int dir, int do_weight_or_recon, int recontype, int whichreduce, int preforder, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE *stiffindicator, FTYPE *V,  FTYPE *P, FTYPE (*df)[NUMDFS][NBIGM], FTYPE (*dP)[NBIGM], FTYPE (*etai)[NBIGM], FTYPE (*monoindicator)[NUMMONOINDICATORS][NBIGM], FTYPE (*yprim)[2][NBIGM], FTYPE (*ystecilvar)[2][NBIGM], FTYPE (*yin)[2][NBIGM], FTYPE (*yout)[2][NBIGM], FTYPE (*youtpolycoef)[MAXSPACEORDER][NBIGM]);
 extern  void pass_1d_line_multipl_paraline(int MULTIPLTYPE, int whichquantity, int dir, int do_weight_or_recon, int recontype, int whichreduce, int preforder, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE *stiffindicator, FTYPE *V,  FTYPE *P, FTYPE (*df)[NUMDFS][NBIGM], FTYPE (*dP)[NBIGM], FTYPE (*etai)[NBIGM], FTYPE (*monoindicator)[NUMMONOINDICATORS][NBIGM], FTYPE (*yprim)[2][NBIGM], FTYPE (*ystecilvar)[2][NBIGM], FTYPE (*yin)[2][NBIGM], FTYPE (*yout)[2][NBIGM], FTYPE (*youtpolycoef)[MAXSPACEORDER][NBIGM]);
 extern  int apply_bc_line(int doinverse, int iterglobal, int recontype, int bs, int be, FTYPE (*yin)[2][NBIGM],FTYPE (*yout)[2][NBIGM], FTYPE (*youtpolycoef)[MAXSPACEORDER][NBIGM]);
 extern  FTYPE  Ficalc(int dir, FTYPE *V, FTYPE *P, FTYPE **ypl);
 extern  FTYPE etaicalc(int pl, FTYPE *y, FTYPE *V, FTYPE *P);
 extern  void get_limit_slopes(int reallim, int extremum, FTYPE *dq1l, FTYPE *dq1r, FTYPE *dq2, FTYPE *dqout);
 extern  void get_limit_slopes(int reallim, int extremum, FTYPE *dq1l, FTYPE *dq1r, FTYPE *dq2, FTYPE *dqout);
 extern  void compute_jmonotonicity_line(int recontype, int whichreduce, int preforder, int pl, int bs, int ps, int pe, int be, int *minorder, int *maxorder, int *shift,   FTYPE *shockindicator, FTYPE (*df)[NBIGM],  FTYPE (*monoindicator)[NBIGM] , FTYPE *yin, FTYPE (*yout)[NBIGM], FTYPE (*youtpolycoef)[NBIGM]);
 extern  void slope_lim_3points(int reallim, FTYPE yl, FTYPE yc, FTYPE yr,FTYPE *dq);
 extern  void c2e_simple_weno(int order, int ii, int bs, int be, FTYPE *yin, FTYPE *pleft, FTYPE *pright);
 extern  void c2e_simple_eno(int full_order, int is_interpolate_to_left, FTYPE *yin, FTYPE *pout);
 extern  FTYPE limit_ac_correction( int order, int pl, int bs, int bf, FTYPE max_frac_difference, FTYPE *yin, FTYPE *yout );
 extern  void c2e_simple_limiter(int WHICHLIMITERTOREDUCETO, FTYPE *yin, FTYPE *valueleft, FTYPE *valueright);
 extern  int step_ch_full(void);
 extern  int init(int argc, char *argv[]);
 extern  void set_gcov_ks_tov_metric(FTYPE *X, FTYPE *V, FTYPE gcovlocal[][NDIM], FTYPE *gcovpertlocal);
 extern  void set_gcov_bl_tov_metric(FTYPE *X, FTYPE *V, FTYPE gcovlocal[][NDIM], FTYPE *gcovpertlocal);
 extern  int set_gcov_selfspcmetric(FTYPE *X, FTYPE *V, FTYPE *gcovselfpert);
 extern  void icoord(FTYPE *X,int loc, int *i, int *j, int *k);
 extern  int set_gcov_ks_tov_spcmetric(FTYPE *X, FTYPE *V, FTYPE gcov[][NDIM], FTYPE *gcovpert, SFTYPE *MOrself, SFTYPE *phiself, SFTYPE *vrsqself);
 extern  int set_gcov_ks_tov_spcmetric(FTYPE *X, FTYPE *V, FTYPE gcov[][NDIM], FTYPE *gcovpert, SFTYPE *MOrself, SFTYPE *phiself, SFTYPE *vrsqself);
 extern  int set_gcov_bl_tov_spcmetric(FTYPE *X, FTYPE *V, FTYPE gcov[][NDIM], FTYPE *gcovpert, SFTYPE *MOrself, SFTYPE *phiself, SFTYPE *vrsqself);
 extern  void assign_eomfunc(struct of_geom *geom, FTYPE eomfuncgen);
 extern  FTYPE cot(FTYPE arg);
 extern  FTYPE cot(FTYPE arg);
 extern  FTYPE csc(FTYPE arg);
 extern  int store_old_metric(void);
 extern  int pre_stepch(void);
 extern  int post_stepch(FTYPE fullndt);
 extern  int step_ch(FTYPE *fullndt);
 extern  int set_dt(FTYPE (*prim)[N2M][N3M][NPR], SFTYPE *dt);
 extern  int init_grid_post_set_grid(void);
 extern  int post_par_set(void);
 extern  int recompute_fluxpositions(void);
 extern  int recompute_horizonflux_quantities(int fromwhere);
 extern  int find_RinRout(FTYPE *localRin, FTYPE *localRout);
 extern  void icoord(FTYPE *X,int loc, int *i, int *j, int *k);
 extern  void icoord_round(FTYPE *X,int loc, int *i, int *j, int *k);
 extern  FTYPE mysin(FTYPE th);
 extern  FTYPE mycos(FTYPE th);
 extern  FTYPE mysin(FTYPE th);
 extern  FTYPE dfridr(FTYPE (*func)(struct of_geom *,FTYPE*,int,int), struct of_geom *ptrgeom, FTYPE *X,int ii, int jj, int kk);
 extern  int compute_new_metric_longsteps(void);
 extern  void control_metric_update(void);
 extern  int field_Bhat_fluxrecon(FTYPE pr[][N2M][N3M][NPR], FTYPE pointfield[][N2M][N3M][NPR], FTYPE quasifield[][N2M][N3M][NPR]);
 extern  int advance(int stage, FTYPE pi[][N2M][N3M][NPR],FTYPE pb[][N2M][N3M][NPR], FTYPE pf[][N2M][N3M][NPR], 		     FTYPE ui[][N2M][N3M][NPR],FTYPE uf[][N2M][N3M][NPR], FTYPE ucum[][N2M][N3M][NPR], 		     FTYPE *CUf,FTYPE *Cunew,int timeorder, int numtimeorders, FTYPE *ndt);
 extern  int diag_flux(FTYPE prim[][N2M][N3M][NPR], FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR],FTYPE F3[][N2M][N3M][NPR],SFTYPE Dt);
 extern  int diag_flux(FTYPE prim[][N2M][N3M][NPR], FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR],SFTYPE Dt);
 extern  int advance(int stage, FTYPE pi[][N2M][N3M][NPR],FTYPE pb[][N2M][N3M][NPR], FTYPE pf[][N2M][N3M][NPR], 		     FTYPE ui[][N2M][N3M][NPR],FTYPE uf[][N2M][N3M][NPR], FTYPE ucum[][N2M][N3M][NPR], 		     FTYPE *CUf,FTYPE *Cunew,int timeorder, int numtimeorders, FTYPE *ndt);
 extern  int bound_prim_user_dir(int whichdir, int boundstage, FTYPE prim[][N2M][N3M][NPR]);
 extern  int bound_prim_user_after_mpi_dir(int whichdir, int boundstage, FTYPE prim[][N2M][N3M][NPR]);
 extern  int bound_pstag_user_dir(int whichdir, int boundstage, FTYPE pstag[][N2M][N3M][NPR]);
 extern  int bound_prim_user_after_mpi_dir(int whichdir, int boundstage, FTYPE prim[][N2M][N3M][NPR]);
 extern  int bound_flux_user(int boundstage, FTYPE F1[][N2M][N3M][NPR], FTYPE F2[][N2M][N3M][NPR], FTYPE F3[][N2M][N3M][NPR]);
 extern  int bound_pflag_user(int boundstage, int prim[][N2M][N3M][NUMPFLAGS]);
 extern  int diag_fixup_U(FTYPE *Ui, FTYPE *Uf, struct of_geom *ptrgeom, int finalstep,int whocalled);
 extern  int primtoU(int returntype, FTYPE *pr, struct of_state *q, struct of_geom *geom,FTYPE *U);
 extern  FTYPE lc4(int updown, FTYPE detg, int mu,int nu,int kappa,int lambda);
 extern  int ucon_calc_rel4vel_fromuconrel(FTYPE *uconrel, struct of_geom *geom, FTYPE *ucon);
 extern  int limitv3(FTYPE *pr, struct of_state *q, int dir, struct of_geom *geom, FTYPE *v);
 extern  int quasivsq_compute(FTYPE *pr, struct of_geom *geom, FTYPE *quasivsq);
 extern  int limit_quasivsq(FTYPE quasivsqnew, struct of_geom *geom, FTYPE *pr);
 extern  int gamma_calc_fromuconrel(FTYPE *uconrel, struct of_geom *geom, FTYPE*gamma);
 extern  void getconsts(FTYPE *uconmetp, FTYPE *V, struct of_geom *ptrgeom, FTYPE (*dxdxp)[NDIM],FTYPE *uconconst);
 extern  void undoconsts(FTYPE *uconconst, FTYPE *V, struct of_geom *ptrgeom, FTYPE (*dxdxp)[NDIM],FTYPE *uconmetp);
 extern  int usrfun(FTYPE *pr, int n, FTYPE *beta, FTYPE **alpha,FTYPE*normf);
 extern  void nrerror(char error_text[]);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  int Utoprim_ffde(FTYPE *U, struct of_geom *geom, FTYPE *pr);
 extern  int Utoprim_coldgrmhd(FTYPE *U, struct of_geom *geom, FTYPE *pr, int *positivityproblem);
 extern  int Utoprim_ffde(FTYPE *U, struct of_geom *geom, FTYPE *pr);
 extern  void UtoU(int inputtype, int returntype,struct of_geom *ptrgeom,FTYPE *Uin, FTYPE *Uout);
 extern  int entropy_calc(FTYPE *pr, FTYPE *entropy);
 extern  void compute_1plusud0(struct of_geom *geom, struct of_state *q, FTYPE *plus1ud0);
 extern  FTYPE compute_dSdrho(FTYPE rho0, FTYPE u);
 extern  int invertentropyflux_calc(FTYPE entropyflux,int dir, struct of_state *q, FTYPE *pr);
 extern  int mnewt(int whethertoreport,int ntrail, int mintrial, FTYPE *p, int n, int startp, FTYPE tolx, 		 FTYPE tolf, FTYPE tolxallowed, 		 FTYPE tolfallowed, FTYPE tolxreport, 		 FTYPE tolfreport);
